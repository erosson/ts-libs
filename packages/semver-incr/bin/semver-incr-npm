#!/bin/bash
# which semver-incr-git
set -eu

BIN="`dirname "$(readlink -f "$0")"`"
EXE="`basename $0`"
PACKAGE_PATH="."
PREFIX=""
SUFFIX=""
PUSH_REMOTE="origin"
EXECUTE=0
VERBOSE=0

help() {
    cat <<EOF >&2
Suggest a next semver based on your project's git commit messages. Optionally, release an NPM package and push a git tag with the suggested semver. Designed for CI.

Usage: $EXE [--path PACKAGE_PATH] [--execute]

    -h, --help             show this help message and exit
    -v, --verbose          show detailed output
    --prefix PREFIX        text before all git tags. Useful for monorepos. Default: "<PACKAGE_NAME>/v"
    --suffix SUFFIX        text after all git tags. Default: ""
    --path PATH            show only commits that affect PATH. Useful for monorepos. Default: "."
    --push-remote REMOTE   push tags to this git origin, as in "git push REMOTE NEW_TAG". If empty, pushing is skipped. Default: "origin"
    --execute              git-commit and git-push the suggested tag. Use this for CI.
EOF
}
fail() {
    echo "$@" >&2
    echo >&2
    help
}
logv() {
    [ $VERBOSE -eq 1 ] && echo "$@" >&2 || true
}

# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
while [[ $# -gt 0 ]]; do
    case $1 in
        --path)
            PACKAGE_PATH="$2"
            shift;shift;;
        --push-remote)
            PUSH_REMOTE="$2"
            shift;shift;;
        --prefix)
            PREFIX="$2"
            shift;shift;;
        --suffix)
            SUFFIX="$2"
            shift;shift;;
        --execute)
            EXECUTE=1
            shift;;
        -v|--verbose)
            VERBOSE=1
            shift;;
        -h|--help)
            help
            exit 0
            ;;
        -*|--*)
            echo "unknown option $1"
            echo
            help
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift;;
    esac
done
set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

PACKAGE_NAME="`jq -r ".name" "$PACKAGE_PATH/package.json"`"
PACKAGE_VERSION="`jq -r ".version" "$PACKAGE_PATH/package.json"`"
PACKAGE_PRIVATE="`jq -r ".private" "$PACKAGE_PATH/package.json"`"
if [ "$PACKAGE_PRIVATE" != "null" ]; then
    echo "$PACKAGE_NAME: skipping release of private package"
    exit 0
fi
if [ "$PREFIX" == "" ]; then
    PREFIX="$PACKAGE_NAME/v"
fi

SEMVER_INCR_BASH_ARGS=("--path" "$PACKAGE_PATH" "--prefix" "$PREFIX" "--suffix" "$SUFFIX" "--push-remote" "$PUSH_REMOTE")
[[ $VERBOSE -eq 1 ]] && SEMVER_INCR_BASH_ARGS+=("--verbose")
[[ $EXECUTE -eq 1 ]] && SEMVER_INCR_BASH_ARGS+=("--execute")
logv semver-incr-git "${SEMVER_INCR_BASH_ARGS[@]}"
VERSION="`semver-incr-git "${SEMVER_INCR_BASH_ARGS[@]}"`"
if [ "$VERSION" != "" ]; then
    # https://stackoverflow.com/questions/428109/extract-substring-in-bash
    # https://stackoverflow.com/questions/17368067/length-of-string-in-bash
    PREFIX_LEN="${#PREFIX}"
    VERSIONNO_LEN=$((${#VERSION}-${#PREFIX}-${#SUFFIX}))
    VERSIONNO="${VERSION:$PREFIX_LEN:$VERSIONNO_LEN}"
    logv "$VERSION:$PREFIX_LEN:$VERSIONNO_LEN=$VERSIONNO"
    # TODO support npm instead of yarn here too. can't use npm for both, it creates package-lock files
    # npm version "$VERSIONNO" --no-git-tag-version
    yarn version --new-version "$VERSIONNO" --no-git-tag-version
    NPM_PUBLISH_ARGS=()
    [[ $EXECUTE -eq 1 ]] || NPM_PUBLISH_ARGS+=("--dry-run")
    npm publish "${NPM_PUBLISH_ARGS[@]}"
    # npm version "$PACKAGE_VERSION" --no-git-tag-version
    # npm version "0.0.0" --no-git-tag-version
    yarn version --new-version "0.0.0" --no-git-tag-version
fi

# TODO add test cases:
# private vs non-private package
# bogus package.json
# semver-incr-git returns a version vs. empty
# npm vs yarn